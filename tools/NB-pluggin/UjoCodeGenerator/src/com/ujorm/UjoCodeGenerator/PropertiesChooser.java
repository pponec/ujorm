/*
 *  Copyright 2012 Martin Mahr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.ujorm.UjoCodeGenerator;

import com.ujorm.UjoCodeGenerator.bo.KeyItem;
import java.util.List;
import javax.swing.DefaultListModel;

/**
 *
 * @author Martin Mahr <mahr@effectiva.cz>
 */
public class PropertiesChooser extends javax.swing.JPanel {

    /** Static parameter */
    private static boolean paramGetters = true;
    /** Static parameter */
    private static boolean paramSetters = true;
    /** Static parameter */
    private static boolean paramJavaDoc = true;
    /** Static parameter */
    private static boolean paramDomainClass = false;

    /**
     * Creates new form PropertiesChooser
     */
    public PropertiesChooser(List<KeyItem> data) {

        DefaultListModel defaultListModel = new DefaultListModel();
        for (KeyItem item : data){
            defaultListModel.addElement(item);
        }

        initComponents();
        properties.setModel(defaultListModel);
        cbGetters.getModel().setSelected(paramGetters);
        cbSetters.getModel().setSelected(paramSetters);
        cbJavaDoc.getModel().setSelected(paramJavaDoc);
        cbDomainClass.getModel().setSelected(paramDomainClass);
    }

    /** Select all items */
    public void selectAll() {
        properties.setSelectionInterval(0, properties.getModel().getSize() - 1);
    }

    /** Return selected properties */
    public KeyItem[] getSeletedProperties() {
        Object[] selects = properties.getSelectedValues();
        KeyItem[] result = new KeyItem[selects.length];
        System.arraycopy(selects, 0, result, 0, selects.length);
        return result;
    }

    /** Are the Getters required ? */
    public boolean isGettersRequired() {
        final boolean result = cbGetters.getModel().isSelected();
        paramGetters = result;
        return result;
    }

    /** Are the Setters required ? */
    public boolean isSettersRequired() {
        final boolean result = cbSetters.getModel().isSelected();
        paramSetters = result;
        return result;
    }

    /** Are the Setters required ? */
    public boolean isJavaDocRequired() {
        final boolean result = cbJavaDoc.getModel().isSelected();
        paramJavaDoc = result;
        return result;
    }

    /** Are the Setters required ? */
    public boolean isDomainClassRequired() {
        final boolean result = cbDomainClass.getModel().isSelected();
        paramDomainClass = result;
        return result;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        properties = new javax.swing.JList();
        cbGetters = new javax.swing.JCheckBox();
        cbSetters = new javax.swing.JCheckBox();
        cbJavaDoc = new javax.swing.JCheckBox();
        cbDomainClass = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setViewportView(properties);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 350;
        gridBagConstraints.ipady = 109;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(12, 10, 0, 10);
        add(jScrollPane1, gridBagConstraints);

        cbGetters.setMnemonic('G');
        cbGetters.setText("Getters"); // NOI18N
        cbGetters.setToolTipText("Generate Setters according to Ujo Keys"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 22, 0, 0);
        add(cbGetters, gridBagConstraints);

        cbSetters.setMnemonic('S');
        cbSetters.setText("Setters"); // NOI18N
        cbSetters.setToolTipText("Generate Setters according to Ujo Keys"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 22, 0, 0);
        add(cbSetters, gridBagConstraints);

        cbJavaDoc.setMnemonic('C');
        cbJavaDoc.setText("Copy JavaDoc form Keys to new methods"); // NOI18N
        cbJavaDoc.setToolTipText(""); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.ipadx = 60;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 22, 0, 10);
        add(cbJavaDoc, gridBagConstraints);

        cbDomainClass.setMnemonic('D');
        cbDomainClass.setText("Generate a Domain class before Keys"); // NOI18N
        cbDomainClass.setToolTipText(""); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.ipadx = 60;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 22, 0, 10);
        add(cbDomainClass, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cbDomainClass;
    private javax.swing.JCheckBox cbGetters;
    private javax.swing.JCheckBox cbJavaDoc;
    private javax.swing.JCheckBox cbSetters;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList properties;
    // End of variables declaration//GEN-END:variables
}
