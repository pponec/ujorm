package org.ujorm2.metamodel;

import java.time.LocalDateTime;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import org.ujorm2.Key;
import org.ujorm2.core.AbstractDomainModel;
import org.ujorm2.core.DirectKeyRing;
import org.ujorm2.core.KeyFactory;
import org.ujorm2.core.XKey;
import org.ujorm2.doman.Item;
import org.ujorm2.doman.User;

/**
 * TODO: A helper class generated by a Maven module.
 * @author Pavel Ponec
 */
public class _User<D> extends AbstractDomainModel<D, User> {

    /** All direct directKeys */
    static final class DirectKeys<T extends User> extends DirectKeyRing<T> {

        final KeyFactory<T> keyFactory = new KeyFactory(User.class);

        final XKey<Integer> id = keyFactory.newKey(
                (d) -> d.getId(),
                (d, v) -> d.setId(v));

        final XKey<Short> pin = keyFactory.newKey(
                (d) -> d.getPin(),
                (d, v) -> d.setPin(v));

        final XKey<String> firstName = keyFactory.newKey(
                (d) -> d.getFirstName(),
                (d, v) -> d.setFirstName(v));

        final XKey<String> sureName = keyFactory.newKey(
                (d) -> d.getSureName(),
                (d, v) -> d.setSureName(v));

        final XKey<LocalDateTime> born = keyFactory.newKey(
                (d) -> d.getBorn(),
                (d, v) -> d.setBorn(v));

        final XKey<User> parent = keyFactory.newKey(
                (d) -> d.getParent(),
                (d, v) -> d.setParent(v));

        @Override
        public KeyFactory<T> getKeyFactory() {
            return keyFactory;
        }
    };

    public _User() {
        super(new DirectKeys());
    }

    public _User(@Nullable final Key<D, ?> keyPrefix, @Nonnull final DirectKeyRing directKeyRing, final boolean descending) {
        super(keyPrefix, directKeyRing, descending);
    }

    @Override
    public <A> AbstractDomainModel<A, User> prefix(Key<A, D> key) {
        return new _User(key, directKeys(), true);
    }

    @Override
    public D createDomain() {
        return (D) new Item();
    }

    @Override
    protected final DirectKeys directKeys() {
       return (DirectKeys) directKeyRing;
    }

    // --- KEY PROVIDERS ---

    public Key<D, Integer> id() {
        return getKey(directKeys().id);
    }

    public Key<D, Short> pin() {
        return getKey(directKeys().pin);
    }

    public Key<D, String> firstName() {
        return getKey(directKeys().firstName);
    }

    public Key<D, String> sureName() {
        return getKey(directKeys().sureName);
    }

    public Key<D, LocalDateTime> born() {
        return getKey(directKeys().born);
    }

    public _User<D> parent() {
        return (_User) getKey(directKeys().parent);
    }
}
