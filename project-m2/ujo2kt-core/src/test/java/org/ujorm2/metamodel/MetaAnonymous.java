package org.ujorm2.metamodel;

import java.time.LocalDateTime;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import org.ujorm2.Key;
import org.ujorm2.core.AbstractDomainModel;
import org.ujorm2.core.DirectKeyRing;
import org.ujorm2.core.KeyFactory;
import org.ujorm2.core.MKey;
import org.ujorm2.doman.Anonymous;
import org.ujorm2.doman.Item;

/**
 * TODO: A helper class generated by a Maven module.
 * @author Pavel Ponec
 */
public class MetaAnonymous<D> extends AbstractDomainModel<D, Anonymous> {

    /** All direct keys */
    static final class DirectKeys<T extends Anonymous> extends DirectKeyRing<T> {

        final KeyFactory<T> keyFactory = new KeyFactory(Anonymous.class);

        final MKey<Integer> id = keyFactory.newKey(
                (d) -> d.getId(),
                (d, v) -> d.setId(v));

        final MKey<Short> pin = keyFactory.newKey(
                (d) -> d.getPin(),
                (d, v) -> d.setPin(v));

        final MKey<LocalDateTime> created = keyFactory.newKey(
                (d) -> d.getCreated(),
                (d, v) -> d.setCreated(v));

        final MKey<Anonymous> parent = keyFactory.newKey(
                (d) -> d.getParent(),
                (d, v) -> d.setParent(v));

        @Override
        public KeyFactory<T> getKeyFactory() {
            return keyFactory;
        }
    };

    public MetaAnonymous() {
        super(new DirectKeys());
    }

    public MetaAnonymous(@Nullable final Key<D, ?> keyPrefix, @Nonnull final DirectKeyRing directKeyRing, final boolean descending) {
        super(keyPrefix, directKeyRing, descending);
    }

    @Override
    public <A> AbstractDomainModel<A, Anonymous> prefix(Key<A, D> key) {
        return new MetaAnonymous(key, keys(), false);
    }

    @Override
    public D createDomain() {
        return (D) new Item();
    }

    /** Provider of an instance of DirectKeys */
    @Override
    protected final DirectKeys keys() {
        return (DirectKeys) directKeyRing;
    }

    // --- KEY PROVIDERS ---

    public Key<D, Integer> id() {
        return getKey(keys().id);
    }

    public Key<D, Short> pin() {
        return getKey(keys().pin);
    }

    public Key<D, LocalDateTime> created() {
        return getKey(keys().created);
    }

    public MetaAnonymous<D> parent() {
        return (MetaAnonymous) getKey(keys().parent);
    }

}
